// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: catalog-go/product/product.proto

package product

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Gender int32

const (
	Gender_UNKNOWN Gender = 0
	Gender_MALE    Gender = 1
	Gender_FEMALE  Gender = 2
	Gender_UNISEX  Gender = 3
	Gender_KIDS    Gender = 4
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "UNKNOWN",
		1: "MALE",
		2: "FEMALE",
		3: "UNISEX",
		4: "KIDS",
	}
	Gender_value = map[string]int32{
		"UNKNOWN": 0,
		"MALE":    1,
		"FEMALE":  2,
		"UNISEX":  3,
		"KIDS":    4,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_catalog_go_product_product_proto_enumTypes[0].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_catalog_go_product_product_proto_enumTypes[0]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_catalog_go_product_product_proto_rawDescGZIP(), []int{0}
}

type Stage int32

const (
	Stage_DRAFT       Stage = 0
	Stage_VALIDATION  Stage = 1
	Stage_PUBLIC      Stage = 2
	Stage_REJECTED    Stage = 3
	Stage_DATA_SOURCE Stage = 4
)

// Enum value maps for Stage.
var (
	Stage_name = map[int32]string{
		0: "DRAFT",
		1: "VALIDATION",
		2: "PUBLIC",
		3: "REJECTED",
		4: "DATA_SOURCE",
	}
	Stage_value = map[string]int32{
		"DRAFT":       0,
		"VALIDATION":  1,
		"PUBLIC":      2,
		"REJECTED":    3,
		"DATA_SOURCE": 4,
	}
)

func (x Stage) Enum() *Stage {
	p := new(Stage)
	*p = x
	return p
}

func (x Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_catalog_go_product_product_proto_enumTypes[1].Descriptor()
}

func (Stage) Type() protoreflect.EnumType {
	return &file_catalog_go_product_product_proto_enumTypes[1]
}

func (x Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stage.Descriptor instead.
func (Stage) EnumDescriptor() ([]byte, []int) {
	return file_catalog_go_product_product_proto_rawDescGZIP(), []int{1}
}

type Identifier int32

const (
	Identifier_REMOTE_ID Identifier = 0
	Identifier_MPN       Identifier = 1
	Identifier_GTIN      Identifier = 2
)

// Enum value maps for Identifier.
var (
	Identifier_name = map[int32]string{
		0: "REMOTE_ID",
		1: "MPN",
		2: "GTIN",
	}
	Identifier_value = map[string]int32{
		"REMOTE_ID": 0,
		"MPN":       1,
		"GTIN":      2,
	}
)

func (x Identifier) Enum() *Identifier {
	p := new(Identifier)
	*p = x
	return p
}

func (x Identifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Identifier) Descriptor() protoreflect.EnumDescriptor {
	return file_catalog_go_product_product_proto_enumTypes[2].Descriptor()
}

func (Identifier) Type() protoreflect.EnumType {
	return &file_catalog_go_product_product_proto_enumTypes[2]
}

func (x Identifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Identifier.Descriptor instead.
func (Identifier) EnumDescriptor() ([]byte, []int) {
	return file_catalog_go_product_product_proto_rawDescGZIP(), []int{2}
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *int32               `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title             string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description       string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MetaTitle         string               `protobuf:"bytes,4,opt,name=meta_title,json=metaTitle,proto3" json:"meta_title,omitempty"`
	MetaDescription   string               `protobuf:"bytes,5,opt,name=meta_description,json=metaDescription,proto3" json:"meta_description,omitempty"`
	MetaKeywords      string               `protobuf:"bytes,6,opt,name=meta_keywords,json=metaKeywords,proto3" json:"meta_keywords,omitempty"`
	Slug              string               `protobuf:"bytes,31,opt,name=slug,proto3" json:"slug,omitempty"`
	Code              string               `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	ManualPairingCode string               `protobuf:"bytes,8,opt,name=manual_pairing_code,json=manualPairingCode,proto3" json:"manual_pairing_code,omitempty"`
	ReleasedDate      *timestamp.Timestamp `protobuf:"bytes,9,opt,name=released_date,json=releasedDate,proto3" json:"released_date,omitempty"`
	Stage             Stage                `protobuf:"varint,10,opt,name=stage,proto3,enum=catalog.product.Stage" json:"stage,omitempty"`
	Source            string               `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	Gender            Gender               `protobuf:"varint,12,opt,name=gender,proto3,enum=catalog.product.Gender" json:"gender,omitempty"`
	Mpn               string               `protobuf:"bytes,13,opt,name=mpn,proto3" json:"mpn,omitempty"`
	Gtin              string               `protobuf:"bytes,14,opt,name=gtin,proto3" json:"gtin,omitempty"`
	MainProductId     *int32               `protobuf:"varint,15,opt,name=main_product_id,json=mainProductId,proto3,oneof" json:"main_product_id,omitempty"`
	RemoteId          string               `protobuf:"bytes,16,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	RecommendedPrice  float64              `protobuf:"fixed64,17,opt,name=recommended_price,json=recommendedPrice,proto3" json:"recommended_price,omitempty"`
	// referrals
	BrandId     int32                `protobuf:"varint,18,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ModelId     int32                `protobuf:"varint,19,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	SizeTableId *int32               `protobuf:"varint,20,opt,name=size_table_id,json=sizeTableId,proto3,oneof" json:"size_table_id,omitempty"`
	Attributes  []*Attribute         `protobuf:"bytes,23,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Categories  []*Category          `protobuf:"bytes,24,rep,name=categories,proto3" json:"categories,omitempty"`
	Images      []*Image             `protobuf:"bytes,25,rep,name=images,proto3" json:"images,omitempty"`
	Labels      []*Label             `protobuf:"bytes,30,rep,name=labels,proto3" json:"labels,omitempty"`
	Active      bool                 `protobuf:"varint,26,opt,name=active,proto3" json:"active,omitempty"`
	ActiveSince *timestamp.Timestamp `protobuf:"bytes,27,opt,name=active_since,json=activeSince,proto3" json:"active_since,omitempty"`
	// metadata
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,28,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,29,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_go_product_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_go_product_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_catalog_go_product_product_proto_rawDescGZIP(), []int{0}
}

func (x *Product) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Product) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetMetaTitle() string {
	if x != nil {
		return x.MetaTitle
	}
	return ""
}

func (x *Product) GetMetaDescription() string {
	if x != nil {
		return x.MetaDescription
	}
	return ""
}

func (x *Product) GetMetaKeywords() string {
	if x != nil {
		return x.MetaKeywords
	}
	return ""
}

func (x *Product) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Product) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Product) GetManualPairingCode() string {
	if x != nil {
		return x.ManualPairingCode
	}
	return ""
}

func (x *Product) GetReleasedDate() *timestamp.Timestamp {
	if x != nil {
		return x.ReleasedDate
	}
	return nil
}

func (x *Product) GetStage() Stage {
	if x != nil {
		return x.Stage
	}
	return Stage_DRAFT
}

func (x *Product) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Product) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_UNKNOWN
}

func (x *Product) GetMpn() string {
	if x != nil {
		return x.Mpn
	}
	return ""
}

func (x *Product) GetGtin() string {
	if x != nil {
		return x.Gtin
	}
	return ""
}

func (x *Product) GetMainProductId() int32 {
	if x != nil && x.MainProductId != nil {
		return *x.MainProductId
	}
	return 0
}

func (x *Product) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Product) GetRecommendedPrice() float64 {
	if x != nil {
		return x.RecommendedPrice
	}
	return 0
}

func (x *Product) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *Product) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *Product) GetSizeTableId() int32 {
	if x != nil && x.SizeTableId != nil {
		return *x.SizeTableId
	}
	return 0
}

func (x *Product) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Product) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Product) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Product) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Product) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Product) GetActiveSince() *timestamp.Timestamp {
	if x != nil {
		return x.ActiveSince
	}
	return nil
}

func (x *Product) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Product) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_go_product_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_go_product_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_catalog_go_product_product_proto_rawDescGZIP(), []int{1}
}

func (x *ProductRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProductListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *int32               `protobuf:"varint,1,opt,name=Id,proto3,oneof" json:"Id,omitempty"`
	Title             string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description       string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Slug              string               `protobuf:"bytes,18,opt,name=slug,proto3" json:"slug,omitempty"`
	Code              string               `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	ManualPairingCode string               `protobuf:"bytes,5,opt,name=manual_pairing_code,json=manualPairingCode,proto3" json:"manual_pairing_code,omitempty"`
	Gender            Gender               `protobuf:"varint,6,opt,name=gender,proto3,enum=catalog.product.Gender" json:"gender,omitempty"`
	Mpn               string               `protobuf:"bytes,7,opt,name=mpn,proto3" json:"mpn,omitempty"`
	Gtin              string               `protobuf:"bytes,8,opt,name=gtin,proto3" json:"gtin,omitempty"`
	RemoteId          string               `protobuf:"bytes,9,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	ReleasedDate      *timestamp.Timestamp `protobuf:"bytes,10,opt,name=released_date,json=releasedDate,proto3" json:"released_date,omitempty"`
	Stage             Stage                `protobuf:"varint,11,opt,name=stage,proto3,enum=catalog.product.Stage" json:"stage,omitempty"`
	Active            bool                 `protobuf:"varint,19,opt,name=active,proto3" json:"active,omitempty"`
	// referrals
	BrandId     int32  `protobuf:"varint,12,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ModelId     int32  `protobuf:"varint,13,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	SizeTableId *int32 `protobuf:"varint,14,opt,name=size_table_id,json=sizeTableId,proto3,oneof" json:"size_table_id,omitempty"`
	// metadata
	CreatedAt     *timestamp.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamp.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	MainProductId *int32               `protobuf:"varint,17,opt,name=main_product_id,json=mainProductId,proto3,oneof" json:"main_product_id,omitempty"`
}

func (x *ProductListItem) Reset() {
	*x = ProductListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_go_product_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListItem) ProtoMessage() {}

func (x *ProductListItem) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_go_product_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListItem.ProtoReflect.Descriptor instead.
func (*ProductListItem) Descriptor() ([]byte, []int) {
	return file_catalog_go_product_product_proto_rawDescGZIP(), []int{2}
}

func (x *ProductListItem) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ProductListItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProductListItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductListItem) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ProductListItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProductListItem) GetManualPairingCode() string {
	if x != nil {
		return x.ManualPairingCode
	}
	return ""
}

func (x *ProductListItem) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_UNKNOWN
}

func (x *ProductListItem) GetMpn() string {
	if x != nil {
		return x.Mpn
	}
	return ""
}

func (x *ProductListItem) GetGtin() string {
	if x != nil {
		return x.Gtin
	}
	return ""
}

func (x *ProductListItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *ProductListItem) GetReleasedDate() *timestamp.Timestamp {
	if x != nil {
		return x.ReleasedDate
	}
	return nil
}

func (x *ProductListItem) GetStage() Stage {
	if x != nil {
		return x.Stage
	}
	return Stage_DRAFT
}

func (x *ProductListItem) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ProductListItem) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *ProductListItem) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *ProductListItem) GetSizeTableId() int32 {
	if x != nil && x.SizeTableId != nil {
		return *x.SizeTableId
	}
	return 0
}

func (x *ProductListItem) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProductListItem) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProductListItem) GetMainProductId() int32 {
	if x != nil && x.MainProductId != nil {
		return *x.MainProductId
	}
	return 0
}

type IdentifyProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteId string `protobuf:"bytes,1,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Mpn      string `protobuf:"bytes,2,opt,name=mpn,proto3" json:"mpn,omitempty"`
	Gtin     string `protobuf:"bytes,3,opt,name=gtin,proto3" json:"gtin,omitempty"`
}

func (x *IdentifyProductRequest) Reset() {
	*x = IdentifyProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_go_product_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifyProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifyProductRequest) ProtoMessage() {}

func (x *IdentifyProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_go_product_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifyProductRequest.ProtoReflect.Descriptor instead.
func (*IdentifyProductRequest) Descriptor() ([]byte, []int) {
	return file_catalog_go_product_product_proto_rawDescGZIP(), []int{3}
}

func (x *IdentifyProductRequest) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *IdentifyProductRequest) GetMpn() string {
	if x != nil {
		return x.Mpn
	}
	return ""
}

func (x *IdentifyProductRequest) GetGtin() string {
	if x != nil {
		return x.Gtin
	}
	return ""
}

type IdentifiedProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentifiedBy Identifier         `protobuf:"varint,1,opt,name=identified_by,json=identifiedBy,proto3,enum=catalog.product.Identifier" json:"identified_by,omitempty"`
	Products     []*ProductListItem `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *IdentifiedProductResponse) Reset() {
	*x = IdentifiedProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_go_product_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifiedProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifiedProductResponse) ProtoMessage() {}

func (x *IdentifiedProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_go_product_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifiedProductResponse.ProtoReflect.Descriptor instead.
func (*IdentifiedProductResponse) Descriptor() ([]byte, []int) {
	return file_catalog_go_product_product_proto_rawDescGZIP(), []int{4}
}

func (x *IdentifiedProductResponse) GetIdentifiedBy() Identifier {
	if x != nil {
		return x.IdentifiedBy
	}
	return Identifier_REMOTE_ID
}

func (x *IdentifiedProductResponse) GetProducts() []*ProductListItem {
	if x != nil {
		return x.Products
	}
	return nil
}

var File_catalog_go_product_product_proto protoreflect.FileDescriptor

var file_catalog_go_product_product_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x09, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x70, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x70, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x0b, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0x20, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xe0, 0x05, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x70, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x70, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x74,
	0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x0f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x16, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x70, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x70, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x74,
	0x69, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x19, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2a, 0x41, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x4e, 0x49, 0x53, 0x45, 0x58, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x44,
	0x53, 0x10, 0x04, 0x2a, 0x4d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x04, 0x2a, 0x2e, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x50, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x54, 0x49, 0x4e,
	0x10, 0x02, 0x32, 0xba, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x66, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x14, 0x5a, 0x12, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_catalog_go_product_product_proto_rawDescOnce sync.Once
	file_catalog_go_product_product_proto_rawDescData = file_catalog_go_product_product_proto_rawDesc
)

func file_catalog_go_product_product_proto_rawDescGZIP() []byte {
	file_catalog_go_product_product_proto_rawDescOnce.Do(func() {
		file_catalog_go_product_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_catalog_go_product_product_proto_rawDescData)
	})
	return file_catalog_go_product_product_proto_rawDescData
}

var file_catalog_go_product_product_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_catalog_go_product_product_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_catalog_go_product_product_proto_goTypes = []interface{}{
	(Gender)(0),                       // 0: catalog.product.Gender
	(Stage)(0),                        // 1: catalog.product.Stage
	(Identifier)(0),                   // 2: catalog.product.Identifier
	(*Product)(nil),                   // 3: catalog.product.Product
	(*ProductRequest)(nil),            // 4: catalog.product.ProductRequest
	(*ProductListItem)(nil),           // 5: catalog.product.ProductListItem
	(*IdentifyProductRequest)(nil),    // 6: catalog.product.IdentifyProductRequest
	(*IdentifiedProductResponse)(nil), // 7: catalog.product.IdentifiedProductResponse
	(*timestamp.Timestamp)(nil),       // 8: google.protobuf.Timestamp
	(*Attribute)(nil),                 // 9: catalog.product.Attribute
	(*Category)(nil),                  // 10: catalog.product.Category
	(*Image)(nil),                     // 11: catalog.product.Image
	(*Label)(nil),                     // 12: catalog.product.Label
}
var file_catalog_go_product_product_proto_depIdxs = []int32{
	8,  // 0: catalog.product.Product.released_date:type_name -> google.protobuf.Timestamp
	1,  // 1: catalog.product.Product.stage:type_name -> catalog.product.Stage
	0,  // 2: catalog.product.Product.gender:type_name -> catalog.product.Gender
	9,  // 3: catalog.product.Product.attributes:type_name -> catalog.product.Attribute
	10, // 4: catalog.product.Product.categories:type_name -> catalog.product.Category
	11, // 5: catalog.product.Product.images:type_name -> catalog.product.Image
	12, // 6: catalog.product.Product.labels:type_name -> catalog.product.Label
	8,  // 7: catalog.product.Product.active_since:type_name -> google.protobuf.Timestamp
	8,  // 8: catalog.product.Product.created_at:type_name -> google.protobuf.Timestamp
	8,  // 9: catalog.product.Product.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 10: catalog.product.ProductListItem.gender:type_name -> catalog.product.Gender
	8,  // 11: catalog.product.ProductListItem.released_date:type_name -> google.protobuf.Timestamp
	1,  // 12: catalog.product.ProductListItem.stage:type_name -> catalog.product.Stage
	8,  // 13: catalog.product.ProductListItem.created_at:type_name -> google.protobuf.Timestamp
	8,  // 14: catalog.product.ProductListItem.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 15: catalog.product.IdentifiedProductResponse.identified_by:type_name -> catalog.product.Identifier
	5,  // 16: catalog.product.IdentifiedProductResponse.products:type_name -> catalog.product.ProductListItem
	4,  // 17: catalog.product.ProductService.Get:input_type -> catalog.product.ProductRequest
	6,  // 18: catalog.product.ProductService.IdentifyProduct:input_type -> catalog.product.IdentifyProductRequest
	3,  // 19: catalog.product.ProductService.Get:output_type -> catalog.product.Product
	7,  // 20: catalog.product.ProductService.IdentifyProduct:output_type -> catalog.product.IdentifiedProductResponse
	19, // [19:21] is the sub-list for method output_type
	17, // [17:19] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_catalog_go_product_product_proto_init() }
func file_catalog_go_product_product_proto_init() {
	if File_catalog_go_product_product_proto != nil {
		return
	}
	file_catalog_go_product_attribute_proto_init()
	file_catalog_go_product_category_proto_init()
	file_catalog_go_product_image_proto_init()
	file_catalog_go_product_label_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_catalog_go_product_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_go_product_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_go_product_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_go_product_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifyProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_go_product_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifiedProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_catalog_go_product_product_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_catalog_go_product_product_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_catalog_go_product_product_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_catalog_go_product_product_proto_goTypes,
		DependencyIndexes: file_catalog_go_product_product_proto_depIdxs,
		EnumInfos:         file_catalog_go_product_product_proto_enumTypes,
		MessageInfos:      file_catalog_go_product_product_proto_msgTypes,
	}.Build()
	File_catalog_go_product_product_proto = out.File
	file_catalog_go_product_product_proto_rawDesc = nil
	file_catalog_go_product_product_proto_goTypes = nil
	file_catalog_go_product_product_proto_depIdxs = nil
}
